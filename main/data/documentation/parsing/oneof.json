{"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"kind":"symbol","relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parsers"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Use this parser to list out a number of parsers in a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","type":"reference","isActive":true},{"text":" result builder block.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example uses ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true},{"text":" to parse an enum value. To do so, it spells out a list of","type":"text"},{"text":" ","type":"text"},{"text":"parsers to ","type":"text"},{"type":"codeVoice","code":"OneOf"},{"text":", one for each case:","type":"text"}]},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}]},{"type":"codeListing","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","isActive":true,"type":"reference"},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}]},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"syntax":"swift"},{"text":"Specificity","level":2,"type":"heading","anchor":"Specificity"},{"type":"paragraph","inlineContent":[{"text":"The order of the parsers in the above ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","type":"reference"},{"text":" does not matter because each of “€”, “£” and “$”","type":"text"},{"text":" ","type":"text"},{"text":"are mutually exclusive, i.e. at most one will succeed on any given input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple","type":"text"},{"text":" ","type":"text"},{"text":"can succeed on a given input) you must order them from most specific to least specific. That is,","type":"text"},{"text":" ","type":"text"},{"text":"the first parser should succeed on the fewest number of inputs and the last parser should","type":"text"},{"text":" ","type":"text"},{"text":"succeed on the most number of inputs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of"},{"type":"text","text":" "},{"type":"text","text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they"},{"type":"text","text":" "},{"type":"text","text":"are quoted:"}]},{"type":"codeListing","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here we have a list of last and first names separated by a comma, and some of the last names are","type":"text"},{"text":" ","type":"text"},{"text":"quoted because they contain commas.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only"},{"type":"text","text":" "},{"type":"text","text":"if that fails we can parse a plain field that takes everything up until the next comma or"},{"type":"text","text":" "},{"type":"text","text":"newline:"}]},{"type":"codeListing","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can parse many fields to form an array of fields making up a line, and then parse many"},{"type":"text","text":" "},{"type":"text","text":"lines to make up a full, doubly-nested array for the CSV:"}]},{"type":"codeListing","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Running this parser on the input shows that it properly isolates each field of the CSV, even"},{"type":"text","text":" "},{"type":"text","text":"fields that are quoted and contain a comma:"}]},{"type":"codeListing","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason this parser works is because the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" and "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parsers are listed in"},{"type":"text","text":" "},{"type":"text","text":"a very specific order inside the "},{"type":"codeVoice","code":"OneOf"},{"type":"text","text":":"}]},{"type":"codeListing","code":["let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"type":"text","text":" specific parser in that it will succeed on fewer inputs"},{"type":"text","text":" "},{"type":"text","text":"than the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser does. For example:"}]},{"type":"codeListing","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whereas the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser will happily succeed on anything the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser will"},{"type":"text","text":" "},{"type":"text","text":"succeed on:"}]},{"type":"codeListing","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this reason the "},{"code":"quotedField","type":"codeVoice"},{"type":"text","text":" parser must be listed first so that it can try its logic"},{"type":"text","text":" "},{"type":"text","text":"first, which succeeds less frequently, before then trying the "},{"code":"plainField","type":"codeVoice"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"succeeds more often."}]},{"text":"Backtracking","level":2,"type":"heading","anchor":"Backtracking"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"type":"text","text":" parser is the primary tool for introducing backtracking into your parsers,"},{"type":"text","text":" "},{"type":"text","text":"which means to undo the consumption of a parser when it fails. For more information, see the"},{"type":"text","text":" "},{"type":"text","text":"article "},{"type":"text","text":"doc:Backtracking"},{"type":"text","text":"."}]}]}],"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"generated":true}],"metadata":{"modules":[{"name":"Parsing"}],"symbolKind":"struct","role":"symbol","roleHeading":"Structure","title":"OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"externalID":"s:7Parsing5OneOfV","navigatorTitle":[{"kind":"identifier","text":"OneOf"}]},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","kind":"symbol","title":"OneOf","url":"\/documentation\/parsing\/oneof"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","title":"Parsing","kind":"symbol","role":"collection","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","title":"Parser","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"type":"topic","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","kind":"article","role":"collectionGroup","title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/replaceError(with:)":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)","title":"replaceError(with:)","kind":"symbol","abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","role":"symbol","title":"Always"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOfBuilder":{"navigatorTitle":[{"text":"OneOfBuilder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","type":"topic","title":"OneOfBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"OneOfBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"kind":"symbol","url":"\/documentation\/parsing\/oneofbuilder"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/init(_:)":{"url":"\/documentation\/parsing\/oneof\/init(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Parsers"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[],"title":"init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parsers":{"url":"\/documentation\/parsing\/oneof\/parsers","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","abstract":[],"title":"parsers"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/Parser-Implementations":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","title":"Parser Implementations","kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/oneof\/parser-implementations"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Parsers"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","title":"ParserPrinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parse(_:)":{"kind":"symbol","url":"\/documentation\/parsing\/oneof\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)","type":"topic"}}}