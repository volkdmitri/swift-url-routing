{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/Sl","doc:\/\/co.pointfree.URLRouting\/ST"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"}],"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"metadata":{"symbolKind":"protocol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"modules":[{"name":"Parsing"}],"title":"PrependableCollection","roleHeading":"Protocol","externalID":"s:7Parsing21PrependableCollectionP"},"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)"],"title":"Instance Methods"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prependablecollection"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"_EmptyInitializable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"}]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"code":"PrependableCollection","type":"codeVoice"},{"text":" is a specialized subset of ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":" that is tuned to","type":"text"},{"text":" ","type":"text"},{"text":"incremental printing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In fact, any ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" can get a conformance for free:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension MyRangeReplaceableCollection: PrependableCollection {}"]},{"inlineContent":[{"text":"Because it is also less strict than ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":", it is an appropriate protocol","type":"text"},{"text":" ","type":"text"},{"text":"to conform to for types that cannot and should not conform to ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" ","type":"text"},{"text":"directly.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":" is a common input for string parsers to parse from, but it","type":"text"},{"text":" ","type":"text"},{"text":"does not conform to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":". It does, however, conform to","type":"text"},{"text":" ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":" by validating and prepending the given UTF-8 bytes to its underlying","type":"text"},{"text":" ","type":"text"},{"text":"substring. So in order to write a parser against generic sequences of UTF-8 bytes, you would","type":"text"},{"text":" ","type":"text"},{"text":"constrain its input against ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example the following "},{"type":"codeVoice","code":"Digits"},{"type":"text","text":" parser is generic over an "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" of bytes, and its"},{"type":"text","text":" "},{"type":"text","text":"printer conformance further constraints its input to be prependable."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Digits<Input: Collection>: Parser","where","  Input.Element == UTF8.CodeUnit,  \/\/ Required for working with a collection of bytes (`UInt8`)","  Input.SubSequence == Input       \/\/ Required for the parser to consume from input","{","  func parse(_ input: inout Input) throws -> Int {","    \/\/ Collect all bytes between ASCII \"0\" and \"9\"","    let prefix = input.prefix(while: { $0 >= .init(ascii: \"0\") && $0 <= .init(ascii: \"9\") })","","    \/\/ Attempt to convert to an `Int`","    guard let int = Int(prefix) else {","      struct ParseError: Error {}","      throw ParseError()","    }","","    \/\/ Incrementally consume bytes from input","    input.removeFirst(prefix.count)","","    return int","  }","}","","extension Digits: ParserPrinter where Input: PrependableCollection {","  func print(_ output: Int, into input: inout Input) {","    \/\/ Convert `Int` to string's underlying bytes","    let bytes = String(output).utf8","","    \/\/ Prepend bytes using `PrependableCollection` conformance.","    input.prepend(contentsOf: bytes)","  }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser-printer now works on any collection of UTF-8 code units, including","type":"text"},{"text":" ","type":"text"},{"code":"UTF8View","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ArraySlice<UInt8>","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"123\"[...].utf8","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(input) \/\/ \"123\""]},{"syntax":"swift","type":"codeListing","code":["var input = ArraySlice(\"123\"[...].utf8)","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(decoding: input, as: UTF8.self) \/\/ \"123\""]}],"kind":"content"}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","title":"Parsing","kind":"symbol","role":"collection","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/PrependableCollection/prepend(_:)":{"title":"prepend(_:)","abstract":[{"text":"Adds an element to the beginning of the collection.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/PrependableCollection/init(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)","role":"symbol","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates a new instance of a collection containing the elements of a sequence.","type":"text"}],"url":"\/documentation\/parsing\/prependablecollection\/init(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/PrependableCollection":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection","title":"PrependableCollection","type":"topic","url":"\/documentation\/parsing\/prependablecollection","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/PrependableCollection/prepend(contentsOf:)":{"role":"symbol","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prepend","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Inserts the elements of a sequence or collection to the beginning of this collection.","type":"text"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)","kind":"symbol","url":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","title":"prepend(contentsOf:)"},"doc://co.pointfree.URLRouting/ST":{"type":"unresolvable","identifier":"doc:\/\/co.pointfree.URLRouting\/ST","title":"Swift.Sequence"},"doc://co.pointfree.URLRouting/Sl":{"type":"unresolvable","identifier":"doc:\/\/co.pointfree.URLRouting\/Sl","title":"Swift.Collection"}}}