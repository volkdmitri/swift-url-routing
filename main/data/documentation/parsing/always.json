{"kind":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"While not very useful on its own, the ","type":"text"},{"type":"codeVoice","code":"Always"},{"text":" parser can be helpful when combined with other","type":"text"},{"text":" ","type":"text"},{"text":"parsers or operators.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When its "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Void"},{"type":"text","text":", it can be used as a “no-op” parser of sorts and be plugged into"},{"type":"text","text":" "},{"type":"text","text":"other parser operations. For example, the "},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many","type":"reference","isActive":true},{"type":"text","text":" parser can be configured with separator and"},{"type":"text","text":" "},{"type":"text","text":"terminator parsers:"}]},{"type":"codeListing","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}]},{"type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To support this, "},{"code":"Many","type":"codeVoice"},{"type":"text","text":" plugs "},{"code":"Always<Input, Void>","type":"codeVoice"},{"text":" into each omitted parser. As a simplified","type":"text"},{"text":" ","type":"text"},{"text":"example:","type":"text"}]},{"type":"codeListing","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}]},{"type":"codeListing","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"],"syntax":"swift"},{"type":"aside","content":[{"inlineContent":[{"text":"While ","type":"text"},{"code":"Always","type":"codeVoice"},{"text":" can be used as the last alternative of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"output, the resulting parser will be throwing. Instead, prefer ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns a non-throwing parser.","type":"text"}],"type":"paragraph"}],"style":"note"}]}],"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"sections":[],"metadata":{"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"Always"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"externalID":"s:7Parsing6AlwaysV","role":"symbol","modules":[{"name":"Parsing"}],"symbolKind":"struct","title":"Always"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations"],"generated":true,"title":"Default Implementations"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Always/ParserPrinter-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","url":"\/documentation\/parsing\/always\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","role":"symbol","title":"Always"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","kind":"symbol","title":"OneOf","url":"\/documentation\/parsing\/oneof"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser/replaceError(with:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/parsing\/parser\/replaceerror(with:)","role":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","kind":"symbol","type":"topic","title":"replaceError(with:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-fdjh":{"url":"\/documentation\/parsing\/always\/init(_:)-fdjh","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","title":"init(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/output":{"url":"\/documentation\/parsing\/always\/output","kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Output"}],"type":"topic","role":"symbol","title":"output","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/output"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/parse(_:)":{"url":"\/documentation\/parsing\/always\/parse(_:)","kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"}],"type":"topic","role":"symbol","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/parse(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","title":"Parser","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-56hez":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","kind":"symbol","url":"\/documentation\/parsing\/always\/init(_:)-56hez","abstract":[],"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}]},"doc://co.pointfree.URLRouting/documentation/Parsing":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","url":"\/documentation\/parsing","title":"Parsing","kind":"symbol","role":"collection","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/init(_:)-2spg2":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","type":"topic","title":"init(_:)","url":"\/documentation\/parsing\/always\/init(_:)-2spg2","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://co.pointfree.URLRouting/documentation/Parsing/Many":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"url":"\/documentation\/parsing\/many","navigatorTitle":[{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Many","title":"Many","type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","abstract":[{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/Parser-Implementations":{"title":"Parser Implementations","url":"\/documentation\/parsing\/always\/parser-implementations","abstract":[],"kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/Parser-Implementations"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always/print(_:into:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always\/print(_:into:)","type":"topic","title":"print(_:into:)","url":"\/documentation\/parsing\/always\/print(_:into:)"}}}